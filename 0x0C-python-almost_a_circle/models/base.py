#!/usr/bin/python3
""" This module defines the Base class. """
import json
import csv
import turtle


class Base:
    """ Base class for managing unique IDs. """

    __nb_objects = 0

    def __init__(self, id=None):
        """
        Initializes an instance of the Base class.

        Args:
            id (int): The unique identifier for the instance.

        Attributes:
            id (int): The unique identifier for the instance.

        If `id` is provided it will be assigned to instance's `id` attribute
        If `id` is not provided it will be automatically generated by
        incrementing
        private class attribute __nb_objects and assigned to instance's `id`
        """
        if id is not None:
            self.id = id
        else:
            Base.__nb_objects += 1
            self.id = Base.__nb_objects

    @staticmethod
    def to_json_string(list_dictionaries):
        """
        Return the JSON string representation of list_dictionaries.

        Args:
            list_dictionaries (list): A list of dictionaries.

        Returns:
            str: JSON string representation of the list of dictionaries.
        """
        if list_dictionaries is None or len(list_dictionaries) == 0:
            return "[]"
        return json.dumps(list_dictionaries)

    @classmethod
    def save_to_file(cls, list_objs):
        """
        Write the JSON string representation of list_objs to a file.

        Args:
            list_objs (list): A list of instances.

        Saves the JSON string representation of list_objs to a file named
        "<Class name>.json", overwriting the file if it already exists.
        """
        if list_objs is None:
            list_objs = []
        filename = cls.__name__ + ".json"
        with open(filename, "w") as file:
            file.write(cls.to_json_string([obj.to_dictionary()
                for obj in list_objs]))

    @staticmethod
    def from_json_string(json_string):
        """
        Return a list from the JSON string representation json_string.

        Args:
            json_string (str): A string representing a list of dictionaries.

        Returns:
            list: A list represented by json_string.
        """
        if json_string is None or json_string == "":
            return []
        return json.loads(json_string)

    @classmethod
    def create(cls, **dictionary):
        """
        Create and return an instance with attributes set from a dictionary.

        Args:
            dictionary (dict): A dictionary containing the attributes of the instance.

        Returns:
            object: An instance of the class with attributes set from the dictionary.
        """
        if cls.__name__ == "Rectangle":
            instance = cls(1, 1)
        elif cls.__name__ == "Square":
            instance = cls(1)
        else:
            instance = None

        instance.update(**dictionary)
        return instance

    @classmethod
    def load_from_file(cls):
        """
        Load instances from a JSON file and return a list of instances.

        Returns:
            list: A list of instances loaded from the JSON file.
        """
        filename = cls.__name__ + ".json"
        try:
            with open(filename, "r") as file:
                json_data = file.read()
                data = cls.from_json_string(json_data)
                instances = [cls.create(**item) for item in data]
                return instances
        except FileNotFoundError:
            return[]

    @classmethod
    def save_to_file_csv(cls, list_objs):
        """
        Serialize and save a list of objects to a CSV file.

        Args:
            list_objs (list): List of instances to be serialized.

        """
        filename = cls.__name__ + ".csv"
        with open(filename, 'w', newline='') as file:
            writer = csv.writer(file)
            if list_objs is not None:
                for obj in list_objs:
                    if cls == "Rectangle":
                        writer.writerow([obj.id, obj.width, obj.height,
                            obj.x, obj.y])
                    elif cls == "Square":
                        writer.writerow([obj.id, obj.size, obj.x, obj.y])

    @classmethod
    def load_from_file_csv(cls):
        """
        Deserialize and load a list of objects from a CSV file.

        Returns:
            list: List of instances loaded from the CSV file.
        """
        filename = cls.__name__ + ".csv"
        instances = []
        try:
            with open(filename, 'r') as file:
                reader = csv.reader(file)
                for row in reader:
                    row = [int(val) for val in row]
                    if cls == "Rectangle":
                        obj = cls(row[1], row[2], row[3], row[4], row[0])
                    elif cls == "Square":
                        obj = cls(row[1], row[3], row[4], row[0])
                    instances.append(obj)
        except FileNotFoundError:
            pass
        return instances

    @staticmethod
    def draw(list_rectangles, list_squares):
        """
        Opens a window and draws all the Rectangles and Squares.

        Args:
            list_rectangles (list): List of Rectangle instances to be drawn.
            list_squares (list): List of Square instances to be drawn.

        Returns:
            None
        """
        window = turtle.Screen()
        window.title("Drawing Rectangles and Squares")

        pen = turtle.Turtle()

        for rect in list_rectangles:
            pen.penup()
            pen.goto(rect.x, -rect.y)
            pen.pendown()
            pen.fillcolor("pink")
            pen.begin_fill()
            for _ in range(2):
                pen.forward(rect.width)
                pen.left(90)
                pen.forward(rect.height)
                pen.left(90)
            pen.end_fill()

        for square in list_squares:
            pen.penup()
            pen.goto(square.x, -square.y)
            pen.pendown()
            pen.fillcolor("brown")
            pen.begin_fill()
            for _ in range(4):
                pen.forward(square.size)
                pen.left(90)
            pen.end_fill()

        pen.hideturtle()
        window.exitonclick()
